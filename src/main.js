import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import { config } from './config.js';
import { executeServerCommand, backupDatabase, autoBackupDatabase } from './server-utils.js';

const bot = new TelegramBot(config.TOKEN, { polling: true });
bot.onText(/\/panel/, (msg) => {
  const chatId = msg.chat.id;
  
  if (config.AUTO_BACKUP_CHAT_ID === null) {
    config.AUTO_BACKUP_CHAT_ID = chatId;
  }
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "start_server" },
        { text: "‚èπÔ∏è –°—Ç–æ–ø —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "stop_server" }
      ],
      [
        { text: "üîÑ –†–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞", callback_data: "restart_server" },
        { text: "üíæ –ë–µ–∫–∞–ø –ë–î", callback_data: "backup_db" }
      ]
    ]
  };
  
  bot.sendMessage(chatId, 
    "üéÆ **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CRMP —Å–µ—Ä–≤–µ—Ä–æ–º**\n\n" +
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n" +
    "üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–∫–∞–ø –∫–∞–∂–¥—ã–π —á–∞—Å –≤–∫–ª—é—á–µ–Ω",
    {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    }
  );
});

bot.onText(/\/restart/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é CRMP —Å–µ—Ä–≤–µ—Ä...");
  
  executeServerCommand(3)
    .then(() => {
      bot.sendMessage(chatId, "‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!");
    })
    .catch((error) => {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${error.message}`);
    });
});

bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const messageId = message.message_id;
  const data = callbackQuery.data;
  
  switch (data) {
    case "start_server":
      bot.answerCallbackQuery(callbackQuery.id, { text: "–ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä..." });
      bot.editMessageText("üîÑ –ó–∞–ø—É—Å–∫–∞—é CRMP —Å–µ—Ä–≤–µ—Ä...", {
        chat_id: chatId,
        message_id: messageId
      });
      
      executeServerCommand(1)
        .then(() => {
          bot.editMessageText("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!", {
            chat_id: chatId,
            message_id: messageId
          });
        })
        .catch((error) => {
          bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
            chat_id: chatId,
            message_id: messageId
          });
        });
      break;
      
    case "stop_server":
      bot.answerCallbackQuery(callbackQuery.id, { text: "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä..." });
      bot.editMessageText("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é CRMP —Å–µ—Ä–≤–µ—Ä...", {
        chat_id: chatId,
        message_id: messageId
      });
      
      executeServerCommand(2)
        .then(() => {
          bot.editMessageText("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", {
            chat_id: chatId,
            message_id: messageId
          });
        })
        .catch((error) => {
          bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
            chat_id: chatId,
            message_id: messageId
          });
        });
      break;
      
    case "restart_server":
      bot.answerCallbackQuery(callbackQuery.id, { text: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä..." });
      bot.editMessageText("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é CRMP —Å–µ—Ä–≤–µ—Ä...", {
        chat_id: chatId,
        message_id: messageId
      });
      
      executeServerCommand(3)
        .then(() => {
          bot.editMessageText("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!", {
            chat_id: chatId,
            message_id: messageId
          });
        })
        .catch((error) => {
          bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
            chat_id: chatId,
            message_id: messageId
          });
        });
      break;
      
    case "backup_db":
      bot.answerCallbackQuery(callbackQuery.id, { text: "–°–æ–∑–¥–∞—é –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." });
      handleBackupDatabase(chatId, messageId);
      break;
  }
});

async function handleBackupDatabase(chatId, messageId) {
  try {
    const result = await backupDatabase(chatId, messageId);
    if (result) {
      bot.sendDocument(chatId, result.data, {
        caption: result.caption,
        filename: result.filename
      });
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: ${error.message}`);
  }
}

async function handleAutoBackup(chatId) {
  try {
    const result = await autoBackupDatabase(chatId);
    if (result) {
      bot.sendDocument(chatId, result.data, {
        caption: result.caption,
        filename: result.filename
      });
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–µ–∫–∞–ø–∞: ${error.message}`);
  }
}

cron.schedule('0 * * * *', () => {
  if (config.AUTO_BACKUP_CHAT_ID !== null) {
    handleAutoBackup(config.AUTO_BACKUP_CHAT_ID);
  }
});

bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
console.log('  /panel - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º');
console.log('  /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
console.log('üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å');
